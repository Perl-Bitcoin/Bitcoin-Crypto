package Bitcoin::Crypto::Network;

use v5.10; use warnings;
use Moo;
use Scalar::Util qw(blessed);
use Types::Standard qw(Str Int Str);
use Types::Common::String qw(StrLength);

use Bitcoin::Crypto::Exception;
use Bitcoin::Crypto;

use namespace::clean;
our $VERSION = Bitcoin::Crypto->VERSION;

my %networks;
my $default_network;

has "id" => (
	is => "ro",
	isa => Str,
	required => 1,
);

has "name" => (
	is => "ro",
	isa => Str,
	required => 1,
);

has "p2pkh_byte" => (
	is => "ro",
	isa => StrLength [1, 1],
	required => 1,
);

has "wif_byte" => (
	is => "ro",
	isa => StrLength [1, 1],
	required => 1,
);

has "p2sh_byte" => (
	is => "ro",
	isa => StrLength [1, 1],
	required => 0,
);

has "segwit_hrp" => (
	is => "ro",
	isa => Str,
	required => 0,
);

has "extprv_version" => (
	is => "ro",
	isa => Int,
	required => 0,
);

has "extpub_version" => (
	is => "ro",
	isa => Int,
	required => 0,
);

has "bip44_coin" => (
	is => "ro",
	isa => Int,
	required => 0,
);

sub register
{
	my ($self, %config) = @_;
	if (!blessed $self) {
		$self = $self->new(%config);
	}
	$networks{$self->id} = $self;
	return $self;
}

sub set_default
{
	my ($self) = @_;

	Bitcoin::Crypto::Exception::NetworkConfig->raise(
		"network must be an instance of Bitcoin::Crypto::Network"
	) unless blessed($self);

	Bitcoin::Crypto::Exception::NetworkConfig->raise(
		"the network needs to be registered before becoming the default one"
	) unless defined $networks{$self->id};

	$default_network = $self->id;
	return $self;
}

sub find
{
	my ($class, $sub) = @_;

	return keys %networks
		unless defined $sub;

	Bitcoin::Crypto::Exception::NetworkConfig->raise(
		"argument passed to Bitcoin::Crypto::Network->find must be a coderef returning boolean"
	) unless ref $sub eq "CODE";

	return grep { $sub->($networks{$_}) } keys %networks;
}

sub get
{
	my ($class, $id) = @_;

	my $network = $networks{$id // $default_network};
	Bitcoin::Crypto::Exception::NetworkConfig->raise(
		"network $id is not registered"
	) unless defined $network;

	return $network;
}

__PACKAGE__->register(
	id => "bitcoin",
	name => "Bitcoin Mainnet",
	p2pkh_byte => "\x00",
	p2sh_byte => "\x05",
	segwit_hrp => "bc",
	wif_byte => "\x80",
	extprv_version => 0x0488ade4,
	extpub_version => 0x0488b21e,
	bip44_coin => 0,
)->set_default;

__PACKAGE__->register(
	id => "bitcoin_testnet",
	name => "Bitcoin Testnet",
	p2pkh_byte => "\x6f",
	p2sh_byte => "\xc4",
	segwit_hrp => "tb",
	wif_byte => "\xef",
	extprv_version => 0x04358394,
	extpub_version => 0x043587cf,
	bip44_coin => 1,
);

1;

__END__
=head1 NAME

Bitcoin::Crypto::Network - Management tool for cryptocurrency networks

=head1 SYNOPSIS

	use Bitcoin::Crypto::Network;

	# by default network is set to bitcoin
	# get() without arguments returns default network

	Bitcoin::Crypto::Network->get->name; # Bitcoin Mainnet

	# by default there are two networks specified
	# find() without arguments returns a list of all network ids

	Bitcoin::Crypto::Network->find; # (mainnet, testnet)

	# you can get full network configuration with get() using network id

	Bitcoin::Crypto::Network->get("bitcoin_testnet")->name; # Bitcoin Testnet

	# search for network and get array of keys in return
	# there will be multiple results if your search is matched
	# by multiple networks

	Bitcoin::Crypto::Network->find(sub { shift->name eq "Bitcoin Mainnet" }); # (mainnet)
	Bitcoin::Crypto::Network->find(sub { shift->p2pkh_byte eq "\x6f" }); # (testnet)

	# if you're working with cryptocurrency other than Bitcoin you need to add a new network

	# network configuration is important for importing WIF private keys (network
	# recognition), generating addresses and serializing extended keys.
	# It may also hold other data specific to a network

	# register() can be used to create a network

	my $litecoin = Bitcoin::Crypto::Network->register(
		id => "litecoin",
		name => "Litecoin Mainnet",
		p2pkh_byte => "\x30",
		wif_byte => "\xb0",
	);

	# after you've added your network you can set it as default. This means that
	# all extended keys generated by other means than importing serialized key and
	# all private keys generated by other means than importing WIF / extended keys
	# will use that configuration.

	$litecoin->set_default;


=head1 DESCRIPTION

This package allows you to manage non-bitcoin cryptocurrencies.
Before you start producing keys and addresses for your favorite crypto
you have to configure it's network first.

=head1 CONFIGURATION

Right now networks only require four keys, which are marked with *

	my %config = (
		id => "* identifier for the network",
		name => "* human-readable network name",
		p2pkh_byte => "* p2pkh address prefix byte, eg. 0x00",
		p2sh_byte => "p2sh address prefix byte, eg. 0x05",
		segwit_hrp => "segwit native address human readable part, eg. 'bc'",
		wif_byte => "* WIF private key prefix byte, eg. 0x80",
		extprv_version => "version of extended private keys, eg. 0x0488ade4",
		extpub_version => "version of extended public keys, eg. 0x0488b21e",
		bip44_coin => "bip44 coin number, eg. 0",
	);

After you register a network with this hashref your program will be able to import keys for that
network but all keys created from other sources will be treated as Bitcoin.
You need to set_default to make all new keys use it. If you use many
networks it might be better to set a network with key's set_network method:

	$priv->set_network("network_id");

Remember that if you don't specify network field for some feature you won't be able to
use it. For example the module will complain if you try to generate segwit address
with custom network without segwit_hrp field set.

=head1 METHODS

=head2 register

	sig: register($self, %config)

Calls Moose's new with keys present in $config hash when called in static context.
Adds the newly created network instance or the one that the method was called on to a list of known networks.
The hash %config is ignored in object context.

=head2 set_default

	sig: set_default($self)

Sets the network as default one. All newly created private and public
keys will be bound to this network.

=head1 STATIC METHODS

=head2 new

	sig: new($class, %config)

Works the same as C<register> does in static context, but does not add the newly created network to a list of known networks.

=head2 get

	sig: get($class, $id = undef)

Without arguments, returns default network configuration, the Bitcoin::Crypto::Network instance
With the $id argument (string), returns the instance of a configuration matching the id.
Throws an exception if network doesn't exist.

=head2 find

	sig: find($class, $sub = undef)

Without arguments, returns a list of all registered network ids.
With the $sub argument (coderef), searches for all networks that pass the criteria and returns their ids.
Returns list.

The $sub will be passed all the instances of registered networks, one at a time.
If must perform required checks and return a boolean value. All the networks that pass this
test will be returned. Example:

	sub {
		my $instance = shift;
		return $instance->name eq "Some name";
	}

=head1 SEE ALSO

=over 2

=item L<Bitcoin::Crypto::Key::ExtPrivate>

=item L<Bitcoin::Crypto::Key::Private>

=back

=cut
